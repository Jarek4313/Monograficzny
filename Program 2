const increment = x => x + 1
const decrement = x => x - 1
const double = x => x * 2
const halve = x => x / 2

const compose1 = (f, g) => x => f(g(x))
const compose2 = (f, g, h) => x => f(g(h(x)))


const compose = (...functions) => functions.reduce(
  (f, g) => (...arguments) => f(g(...arguments)) )

const result = compose(halve, increment, increment, double)
console.log(result(6))

const pipe = (...functions) => functions.reduce(
  (f, g) => (...arguments) => g(f(...arguments)) )

const result1 = pipe(halve, increment, increment, double)
console.log(result1(6))

function curry(fn, ...init_args) {
  var len = fn.length;
  return function() {
    var args = init_args.slice();
    function call(...fn_args) {
      args = args.concat(fn_args);
      if (args.length >= len) {
        return fn.apply(null, args);
      } else {
        return call;
      }
    };
    return call.apply(null, arguments);
  };
}

const multiple = (x,y,z) => x * y * z
const add = (x,y,z) => x + y + z

var curryAdd = curry(add)
var cyrrtMultiple = curry(multiple)

const result3 = compose(
 curryAdd(2,2))

console.log(result3(2))
